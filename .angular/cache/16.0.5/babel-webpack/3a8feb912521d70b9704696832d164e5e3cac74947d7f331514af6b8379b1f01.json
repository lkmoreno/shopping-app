{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction ImgComponent_img_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"img\", 2);\n    i0.ɵɵlistener(\"load\", function ImgComponent_img_0_Template_img_load_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.imgLoaded());\n    })(\"error\", function ImgComponent_img_0_Template_img_error_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.imgError());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"src\", ctx_r0.img, i0.ɵɵsanitizeUrl);\n  }\n}\nfunction ImgComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 3);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"src\", ctx_r2.imageDefault, i0.ɵɵsanitizeUrl);\n  }\n}\nclass ImgComponent {\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  set changeImg(newImg) {\n    this.img = newImg;\n    console.log('change just img  =>', this.img);\n    // code\n  }\n  // counter = 0;\n  // counterFn: number | undefined;\n  constructor() {\n    this.img = '';\n    this.alt = '';\n    this.loaded = new EventEmitter();\n    this.imageDefault = './assets/images/default.png';\n    // before render no correr cosas asincronas y el constructor corre una sola vez\n    // NO async -- once time\n    console.log('constructor', 'imgValue =>', this.img);\n  }\n  ngOnChanges(changes) {\n    //antes  y durante del render\n    // estar actualizando los cambios en los inputs -- puede correr las veces que se cambie\n    // before - during render\n    // changes inputs -- multiples times\n    console.log('ngOnChanges', 'imgValue =>', this.img);\n    console.log('changes', changes);\n    // if (changes.) {\n    //   // code\n    // }\n  }\n\n  ngOnInit() {\n    //antes del render\n    // aqui se pueden correr cosas asincronas ejem fetch, llamados api y se corre una sola vez\n    // before render\n    // async - fetch -- once time\n    console.log('ngOnInit', 'imgValue =>', this.img);\n    // this.counterFn = window.setInterval(() => {\n    //   this.counter += 1;\n    //   console.log('run counter');\n    // }, 1000);\n  }\n\n  ngAfterViewInit() {\n    //despues del render\n    // aqui se manejan los componentes hijos\n    // after render\n    // handler children -- once time\n    console.log('ngAfterViewInit');\n  }\n  ngOnDestroy() {\n    //cuando se elimina el componente una sola vez\n    console.log('ngOnDestroy');\n    // window.clearInterval(this.counterFn);\n  }\n\n  imgError() {\n    this.img = this.imageDefault;\n  }\n  imgLoaded() {\n    console.log('log hijo');\n    this.loaded.emit(this.img);\n  }\n}\nImgComponent.ɵfac = function ImgComponent_Factory(t) {\n  return new (t || ImgComponent)();\n};\nImgComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ImgComponent,\n  selectors: [[\"app-img\"]],\n  inputs: {\n    changeImg: [\"img\", \"changeImg\"],\n    alt: \"alt\"\n  },\n  outputs: {\n    loaded: \"loaded\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 3,\n  vars: 2,\n  consts: [[\"alt\", \"img\", 3, \"src\", \"load\", \"error\", 4, \"ngIf\", \"ngIfElse\"], [\"elseImage\", \"\"], [\"alt\", \"img\", 3, \"src\", \"load\", \"error\"], [\"alt\", \"default\", 3, \"src\"]],\n  template: function ImgComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ImgComponent_img_0_Template, 1, 1, \"img\", 0);\n      i0.ɵɵtemplate(1, ImgComponent_ng_template_1_Template, 1, 1, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n    }\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.img)(\"ngIfElse\", _r1);\n    }\n  },\n  dependencies: [i1.NgIf],\n  styles: [\"img[_ngcontent-%COMP%] {\\n  max-width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9pbWcvaW1nLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZUFBQTtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1ne1xuICBtYXgtd2lkdGg6IDEwMCU7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});\nexport { ImgComponent };","map":{"version":3,"names":["EventEmitter","i0","ɵɵelementStart","ɵɵlistener","ImgComponent_img_0_Template_img_load_0_listener","ɵɵrestoreView","_r4","ctx_r3","ɵɵnextContext","ɵɵresetView","imgLoaded","ImgComponent_img_0_Template_img_error_0_listener","ctx_r5","imgError","ɵɵelementEnd","ɵɵproperty","ctx_r0","img","ɵɵsanitizeUrl","ɵɵelement","ctx_r2","imageDefault","ImgComponent","changeImg","newImg","console","log","constructor","alt","loaded","ngOnChanges","changes","ngOnInit","ngAfterViewInit","ngOnDestroy","emit","selectors","inputs","outputs","features","ɵɵNgOnChangesFeature","decls","vars","consts","template","ImgComponent_Template","rf","ctx","ɵɵtemplate","ImgComponent_img_0_Template","ImgComponent_ng_template_1_Template","ɵɵtemplateRefExtractor","_r1"],"sources":["/home/lmoreno/Desktop/Cursos/CursosAngular/my-store/src/app/components/img/img.component.ts","/home/lmoreno/Desktop/Cursos/CursosAngular/my-store/src/app/components/img/img.component.html"],"sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter, OnChanges, AfterViewInit, OnDestroy, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'app-img',\n  templateUrl: './img.component.html',\n  styleUrls: ['./img.component.scss']\n})\nexport class ImgComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {\n\n  img: string = '';\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input('img')\n  set changeImg(newImg: string) {\n    this.img = newImg;\n    console.log('change just img  =>' ,this.img);\n    // code\n  }\n\n  @Input() alt: string = '';\n  @Output() loaded = new EventEmitter<string>();\n  imageDefault = './assets/images/default.png';\n  // counter = 0;\n  // counterFn: number | undefined;\n\n  constructor() {\n    // before render no correr cosas asincronas y el constructor corre una sola vez\n    // NO async -- once time\n    console.log('constructor', 'imgValue =>', this.img);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n     //antes  y durante del render\n    // estar actualizando los cambios en los inputs -- puede correr las veces que se cambie\n    // before - during render\n    // changes inputs -- multiples times\n    console.log('ngOnChanges', 'imgValue =>', this.img);\n    console.log('changes', changes);\n    // if (changes.) {\n    //   // code\n    // }\n  }\n\n  ngOnInit(): void {\n    //antes del render\n    // aqui se pueden correr cosas asincronas ejem fetch, llamados api y se corre una sola vez\n    // before render\n    // async - fetch -- once time\n    console.log('ngOnInit', 'imgValue =>', this.img);\n    // this.counterFn = window.setInterval(() => {\n    //   this.counter += 1;\n    //   console.log('run counter');\n    // }, 1000);\n  }\n\n  ngAfterViewInit() {\n    //despues del render\n    // aqui se manejan los componentes hijos\n    // after render\n    // handler children -- once time\n    console.log('ngAfterViewInit');\n  }\n\n  ngOnDestroy() {\n    //cuando se elimina el componente una sola vez\n    console.log('ngOnDestroy');\n    // window.clearInterval(this.counterFn);\n  }\n\n  imgError() {\n    this.img = this.imageDefault;\n  }\n\n  imgLoaded() {\n    console.log('log hijo');\n    this.loaded.emit(this.img);\n  }\n\n}\n","<img (load)=\"imgLoaded()\" alt=\"img\" [src]=\"img\" (error)=\"imgError()\" *ngIf=\"img; else elseImage\">\n\n<ng-template #elseImage>\n  <img [src]=\"imageDefault\" alt=\"default\" />\n</ng-template>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}